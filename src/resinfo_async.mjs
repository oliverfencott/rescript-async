// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";

function make(f) {
  return f;
}

function run(t, resolve) {
  return Curry._1(t, resolve);
}

function map(t, fn) {
  return function (resolve) {
    return Curry._1(t, (function (x) {
                  return Curry._1(resolve, Curry._1(fn, x));
                }));
  };
}

function flatMap(t, fn) {
  return function (resolve) {
    return Curry._1(t, (function (x) {
                  return Curry._2(fn, x, resolve);
                }));
  };
}

function unit(a) {
  return function (resolve) {
    return Curry._1(resolve, a);
  };
}

function join(t) {
  return function (resolve) {
    return Curry._1(t, (function (x) {
                  return Curry._1(x, resolve);
                }));
  };
}

function toPromise(t) {
  return new Promise((function (resolve, reject) {
                return Curry._1(t, (function (body) {
                              return resolve(body);
                            }));
              }));
}

function fromPromise(fn, resolve, reject) {
  return function (res) {
    var __x = Curry._1(fn, undefined);
    var __x$1 = __x.then(function (body) {
          Curry._1(res, Curry._1(resolve, body));
          return Promise.resolve(undefined);
        });
    __x$1.catch(function (err) {
          Curry._1(res, Curry._1(reject, err));
          return Promise.resolve(undefined);
        });
    
  };
}

function run$1(t, fn) {
  var shouldRun = {
    contents: true
  };
  Curry._1(t, (function (x) {
          if (shouldRun.contents) {
            return Curry._1(fn, x);
          }
          
        }));
  return function (param) {
    shouldRun.contents = false;
    
  };
}

var Cancellable = {
  run: run$1
};

export {
  make ,
  unit ,
  map ,
  flatMap ,
  run ,
  join ,
  toPromise ,
  fromPromise ,
  Cancellable ,
  
}
/* No side effect */
